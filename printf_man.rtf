An optional decimal digit string specifying a minimum field width.  If the converted value has fewer characters than the field width, 
it will be padded with spaces on the left (or right, if the left-adjustment flag has been given) to fill out the field width.

`#'          The value should be converted to an ``alternate form''.  For c, d, i and u conversions, this option
has no effect. For x and X conversions, a non-zero result has the string `0x' (or `0X' for X conversions) prepended to it.


`0' (zero)   Zero padding.  For all conversions except n, the converted value is padded on the left with zeros rather 
than blanks.  If a precision is given with a numeric conversion (d, i, o, u, i, x, and X), the 0 flag is ignored.

`-'          A negative field width flag; the converted value is to be left adjusted on the field boundary. (left justified) 
Except for n conversions, the converted value is padded on the right with blanks, rather than on the left with blanks or zeros.  
A - overrides a 0 if both are given.
(%-5d, 1) 1⊔⊔⊔⊔


` ' (space)  A blank should be left before a positive number produced by a signed conversion (d, i)

+'  A sign must always be placed before a number produced by a signed conversion.  A + overrides a space if both are used.


An optional precision, in the form of a period . followed by an optional digit string.  
If the digit string is omitted, the precision is taken as zero.  This gives the minimum number of digits to appear for
d, i, o, u, x, and X conversions or the maximum number of characters to be printed from a string for s conversions.

diouxX  The int (or appropriate variant) argument is converted to signed decimal (d and i), unsigned octal (o), 
unsigned decimal (u), or unsigned hexadecimal (x and X) notation.  
The letters ``abcdef'' are used for x conversions; the letters ``ABCDEF'' are used for X conversions.  
The precision, if any, gives the minimum number of digits that must appear; 
if the converted value requires fewer digits, it is padded on the left with zeros.

c       The int argument is converted to an unsigned char, and the resulting character is written.

s       The char * argument is expected to be a pointer to an array of character type (pointer to a string).  
Characters from the array are written up to (but not including) a terminating NUL character; if a precision is specified, 
no more than the number specified are written.  
If a precision is given, no null character need be present; if the precision is not specified, 
or is greater than the size of the array, the array must contain a terminating NUL character.

RETURN VALUES
Returns the number of characters printed (not including the trailing `\0' used to end output to strings) 
Returns a negative value if an error occurs.